import nodemailer from "nodemailer";
import type { Summary, Transcript } from "@shared/schema";

interface SendEmailOptions {
  recipients: string[];
  subject: string;
  message?: string;
  summary: Summary;
  transcript?: Transcript;
  includeOriginal: boolean;
}

export async function sendSummaryEmail({
  recipients,
  subject,
  message,
  summary,
  transcript,
  includeOriginal,
}: SendEmailOptions): Promise<void> {
  // Create transporter
  const transporter = nodemailer.createTransporter({
    host: process.env.SMTP_HOST || "smtp.gmail.com",
    port: parseInt(process.env.SMTP_PORT || "587"),
    secure: false,
    auth: {
      user: process.env.SMTP_USER || process.env.EMAIL_USER,
      pass: process.env.SMTP_PASS || process.env.EMAIL_PASS,
    },
  });

  const finalSummary = summary.editedSummary || summary.generatedSummary;
  
  let htmlContent = `
    <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
      <h2 style="color: #3B82F6; border-bottom: 2px solid #3B82F6; padding-bottom: 10px;">
        Meeting Summary
      </h2>
  `;

  if (message) {
    htmlContent += `
      <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
        <p style="margin: 0; color: #6B7280;">${message}</p>
      </div>
    `;
  }

  htmlContent += `
    <div style="background-color: white; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; margin: 20px 0;">
      <h3 style="color: #374151; margin-top: 0;">Summary</h3>
      <div style="line-height: 1.6; color: #4B5563;">
        ${finalSummary.replace(/\n/g, '<br>')}
      </div>
    </div>
  `;

  if (includeOriginal && transcript) {
    htmlContent += `
      <div style="background-color: #f9fafb; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; margin: 20px 0;">
        <h3 style="color: #374151; margin-top: 0;">Original Transcript</h3>
        <div style="line-height: 1.6; color: #6B7280; font-size: 14px;">
          ${transcript.content.replace(/\n/g, '<br>')}
        </div>
      </div>
    `;
  }

  htmlContent += `
      <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb;">
        <p style="color: #9CA3AF; font-size: 12px;">
          Generated by AI Meeting Notes Summarizer
        </p>
      </div>
    </div>
  `;

  const textContent = `
Meeting Summary

${message ? `${message}\n\n` : ''}

Summary:
${finalSummary}

${includeOriginal && transcript ? `\n\nOriginal Transcript:\n${transcript.content}` : ''}

---
Generated by AI Meeting Notes Summarizer
  `;

  try {
    await transporter.sendMail({
      from: process.env.SMTP_FROM || process.env.EMAIL_FROM || process.env.SMTP_USER,
      to: recipients.join(", "),
      subject,
      text: textContent,
      html: htmlContent,
    });
  } catch (error) {
    console.error("Error sending email:", error);
    throw new Error("Failed to send email. Please check your email configuration and try again.");
  }
}
